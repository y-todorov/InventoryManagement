@using InventoryManagementMVC.Models;
@using InventoryManagementMVC.Extensions;
@using RecipiesModelNS;


@model IEnumerable<ProductViewModel>

@{
    Html.Kendo().Grid<ProductViewModel>()
        .Name("ProductViewModelGrid")
        .Columns(columns =>
        {
            columns.ForeignKey(p => p.CategoryId, (System.Collections.IEnumerable) ViewData["categories"], "CategoryId", "Name")
                .Title("Category");
            columns.ForeignKey(p => p.UnitMeasureId, (System.Collections.IEnumerable) ViewData["unitMeasures"], "UnitMeasureId", "Name")
                .Title("Unit");
            columns.ForeignKey(p => p.StoreId, (System.Collections.IEnumerable) ViewData["stores"], "StoreId", "Name")
                .Title("Store");
        })
        .AddDefaultOptions()
        .DataSource(dataSource => dataSource
            .Ajax()
            .Model(model =>
            {
                model.Field(p => p.CategoryId).DefaultValue(
                    (ViewData["defaultCategory"] as ProductCategory) != null ? (ViewData["defaultCategory"] as ProductCategory).CategoryId : default(int?));
                model.Field(p => p.UnitMeasureId).DefaultValue(
                    (ViewData["defaultUnitMeasure"] as UnitMeasure) != null ? (ViewData["defaultUnitMeasure"] as UnitMeasure).UnitMeasureId : default(int?));
                model.Field(p => p.StoreId).DefaultValue(
                    (ViewData["defaultStore"] as Store) != null ? (ViewData["defaultStore"] as Store).StoreId : default(int?));
                model.Field(p => p.Name).DefaultValue("[Enter a name]");
            })
            .Create("Create", "Product")
            .Read("Read", "Product")
            .Update("Update", "Product")
            .Destroy("Destroy", "Product")
        )
        .Render();
}
